@model List<MachineStatusUpdate.Controllers.StatusController.DowntimeSummaryDto>
@{
    ViewData["Title"] = "B√°o c√°o t·ªïng h·ª£p Downtime";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" href="~/css/report.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" />

<div class="container mt-3">
    <div class="card filter-section">
        <h5 class="mb-3">üîç T√¨m ki·∫øm</h5>
        <form method="get" asp-action="DowntimeSummaryReport" class="row g-3">
            <div class="col-md-2">
                <label for="code">Code:</label>
                <input type="text" name="code" value="@ViewBag.Code" class="form-control"
                    placeholder="Nh·∫≠p m√£ m√°y..." />
            </div>
            <div class="col-md-2">
                <label for="code">State:</label>
                <input type="text" name="state" value="@ViewBag.State" class="form-control"
                    placeholder="Nh·∫≠p tr·∫°ng th√°i..." />
            </div>
            <div class="col-md-2">
                <label for="code">Operation:</label>
                <input type="text" name="operation" value="@ViewBag.Operation" class="form-control"
                    placeholder="Nh·∫≠p t√™n chuy·ªÅn..." />
            </div>
            <div class="col-md-2">
                <label for="code">From:</label>
                <input type="date" name="fromInsDateTime" value="@ViewBag.fromInsDateTime" class="form-control" />
            </div>
            <div class="col-md-2">
                <label for="code">To:</label>
                <input type="date" name="toInsDateTime" value="@ViewBag.toInsDateTime" class="form-control" />
            </div>
            <div class="col-md-4 d-flex align-items-end gap-2">
                <button type="submit" class="btn btn-primary"> <i class="bi bi-search"></i> L·ªçc</button>
                <a asp-action="DowntimeSummaryReport" class="btn btn-secondary">
                    <i class="bi bi-x-circle"></i> X√≥a b·ªô l·ªçc</a>
                <a asp-action="ExportDowntimeSummaryToExcel" asp-route-code="@ViewBag.Code"
                    asp-route-state="@ViewBag.State" asp-route-operation="@ViewBag.Operation"
                    asp-route-fromInsDateTime="@ViewBag.fromInsDateTime"
                    asp-route-toInsDateTime="@ViewBag.toInsDateTime" class="btn btn-success"><i
                        class="bi bi-file-earmark-excel"></i> Xu·∫•t Excel</a>
            </div>
        </form>
    </div>

    <div class="card mt-3 p-3">
        <h5>üìä B√°o c√°o t·ªïng h·ª£p Downtime</h5>
        <table class="table table-bordered table-hover mt-2">
            <thead>
                <tr>
                    <th>Code</th>
                    <th>Operation</th>
                    <th>State</th>
                    <th>Total (minutes)</th>
                </tr>
            </thead>
            <tbody>
                @if (Model != null && Model.Any())
                {
                    foreach (var item in Model)
                    {
                        <tr>
                            <td>@item.Code</td>
                            <td>@item.Operation</td>
                            <td>@item.State</td>
                            <td>@Math.Round(item.TotalMinutes, 2)</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="4" class="text-center text-muted">Kh√¥ng c√≥ d·ªØ li·ªáu</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Chart -->
    <div class="card mt-3 p-3">
        <h5>üìä Downtime Chart</h5>
        <canvas id="downtimeChart"></canvas>
    </div>
</div>

@using System.Text.Json
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    var rawData = @Html.Raw(JsonSerializer.Serialize(Model));

    var codes = [...new Set(rawData.map(x => x.Code))];
    var states = [...new Set(rawData.map(x => x.State))];

    var colors = [
        'rgba(255, 99, 132, 0.6)',
        'rgba(54, 162, 235, 0.6)',
        'rgba(255, 206, 86, 0.6)',
        'rgba(75, 192, 192, 0.6)',
        'rgba(153, 102, 255, 0.6)',
        'rgba(255, 159, 64, 0.6)'
    ];
    var borderColors = colors.map(c => c.replace('0.8', '0.1'));

    var datasets = states.map((state, i) => {
        return {
            label: state,
            data: codes.map(code => {
                return rawData
                    .filter(x => x.Code === code && x.State === state)
                    .reduce((sum, x) => sum + x.TotalMinutes, 0);
            }),
            backgroundColor: colors[i % colors.length],
            borderColor: borderColors[i % borderColors.length],
            borderWidth: 1
        };
    });

    var ctx = document.getElementById('downtimeChart').getContext('2d');
    var chart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: codes,
            datasets: datasets
        },
        options: {
            responsive: true,
            plugins: {
                tooltip: {
                    callbacks: {
                        afterLabel: function (context) {
                            var code = context.chart.data.labels[context.dataIndex];
                            var state = context.dataset.label;
                            var details = rawData
                                .filter(x => x.Code === code && x.State === state)
                                .map(x => `${x.Operation} - ${x.State}: ${x.TotalMinutes.toFixed(2)} ph√∫t`);
                            return details;
                        }
                    }
                },
                legend: { display: true, position: 'top' }
            },
            scales: {
                x: { stacked: true },
                y: { stacked: true, beginAtZero: true, title: { display: true, text: 'Minutes' } }
            }
        }
    });
</script>
